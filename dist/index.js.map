{"version":3,"sources":["../src/authentication.ts","../src/cert.ts","../src/client.ts","../src/http.ts","../src/trim.ts","../src/http2.ts","../src/websocket.ts","../src/request_deprecated.ts","../src/websocket_deprecated.ts"],"sourcesContent":["import cp from 'child_process'\r\nimport util from 'util'\r\nimport { RIOT_GAMES_CERT } from './cert.js'\r\n\r\nconst exec = util.promisify<typeof cp.exec.__promisify__>(cp.exec)\r\n\r\nconst DEFAULT_NAME = 'LeagueClientUx'\r\nconst DEFAULT_POLL_INTERVAL = 2500\r\n\r\nexport interface Credentials {\r\n  /**\r\n   * The system port the LCU API is running on\r\n   */\r\n  port: number\r\n  /**\r\n   * The password for the LCU API\r\n   */\r\n  password: string\r\n  /**\r\n   * The system process id for the LeagueClientUx process\r\n   */\r\n  pid: number\r\n  /**\r\n   * Riot Games' self-signed root certificate (contents of .pem). If\r\n   * it is `undefined` then unsafe authentication will be used.\r\n   */\r\n  certificate?: string\r\n}\r\n\r\nexport interface AuthenticationOptions {\r\n  /**\r\n   * League Client process name. Set to RiotClientUx if you would like to\r\n   * authenticate with the Riot Client\r\n   *\r\n   * Defaults: LeagueClientUx\r\n   */\r\n  name?: string\r\n  /**\r\n   * Does not return before the League Client has been detected. This means the\r\n   * function stays unresolved until a League has been found.\r\n   *\r\n   * Defaults: false\r\n   */\r\n  awaitConnection?: boolean\r\n  /**\r\n   * The time duration in milliseconds between each attempt to locate a League\r\n   * Client process. Has no effect if awaitConnection is false\r\n   *\r\n   * Default: 2500\r\n   */\r\n  pollInterval?: number\r\n  /**\r\n   * Riot Games' self-signed root certificate (contents of .pem)\r\n   *\r\n   * Default: version of certificate bundled in package\r\n   */\r\n  certificate?: string\r\n  /**\r\n   * Do not authenticate requests with Riot Games' self-signed root certificate\r\n   *\r\n   * Default: true if `certificate` is `undefined`\r\n   */\r\n  unsafe?: boolean\r\n  /**\r\n   * Use deprecated Windows WMIC command line over Get-CimInstance. Does nothing\r\n   * if the system is not running on Windows. This is used to keep backwards\r\n   * compatability with Windows 7 systems that don't have Get-CimInstance\r\n   *\r\n   * See https://github.com/matsjla/league-connect/pull/54\r\n   * See https://github.com/matsjla/league-connect/pull/68\r\n   *\r\n   * Default: false\r\n   */\r\n  useDeprecatedWmic?: boolean\r\n  /**\r\n   * Set the Windows shell to use.\r\n   *\r\n   * Default: 'powershell'\r\n   */\r\n  windowsShell?: 'cmd' | 'powershell'\r\n}\r\n\r\n/**\r\n * Indicates that the application does not run on an environment that the\r\n * League Client supports. The Client runs on windows, linux or darwin.\r\n */\r\nexport class InvalidPlatformError extends Error {\r\n  constructor() {\r\n    super('process runs on platform client does not support')\r\n  }\r\n}\r\n\r\n/**\r\n * Indicates that the league client could not be found\r\n */\r\nexport class ClientNotFoundError extends Error {\r\n  constructor() {\r\n    super('league client process could not be located')\r\n  }\r\n}\r\n\r\n/**\r\n * Locates a League Client and retrieves the credentials for the LCU API\r\n * from the found process\r\n *\r\n * If options.awaitConnection is false the promise will resolve into a\r\n * rejection if a League Client is not running\r\n *\r\n * @param options {AuthenticationOptions} Authentication options, if any\r\n *\r\n * @throws InvalidPlatformError If the environment is not running\r\n * windows/linux/darwin\r\n */\r\nexport async function authenticate(options?: AuthenticationOptions): Promise<Credentials> {\r\n  async function tryAuthenticate() {\r\n    const name = options?.name ?? DEFAULT_NAME\r\n    const portRegex = /--app-port=([0-9]+)/\r\n    const passwordRegex = /--remoting-auth-token=([\\w-_]+)/\r\n    const pidRegex = /--app-pid=([0-9]+)/\r\n    const isWindows = process.platform === 'win32'\r\n\r\n    let command: string\r\n    if (!isWindows) {\r\n      command = `ps x -o args | grep '${name}'`\r\n    } else if (isWindows && options?.useDeprecatedWmic === true) {\r\n      command = `wmic process where caption='${name}.exe' get commandline`\r\n    } else {\r\n      command = `Get-CimInstance -Query \"SELECT * from Win32_Process WHERE name LIKE '${name}.exe'\" | Select-Object CommandLine | fl`\r\n    }\r\n\r\n    const executionOptions = isWindows ? { shell: options?.windowsShell ?? ('powershell' as string) } : {}\r\n\r\n    try {\r\n      // See #59 and #60 for why we are replacing all whitespace in the raw output\r\n      const { stdout: rawStdout } = await exec(command, executionOptions)\r\n      // TODO: investigate regression with calling .replace on rawStdout\r\n      const stdout = (rawStdout as any).replace(/\\s/g, '')\r\n      const [, port] = stdout.match(portRegex)!\r\n      const [, password] = stdout.match(passwordRegex)!\r\n      const [, pid] = stdout.match(pidRegex)!\r\n      const unsafe = options?.unsafe === true\r\n      const hasCert = options?.certificate !== undefined\r\n\r\n      // See flow chart for this here: https://github.com/matsjla/league-connect/pull/44#issuecomment-790384881\r\n      // If user specifies certificate, use it\r\n      const certificate = hasCert\r\n        ? options!.certificate\r\n        : // Otherwise: does the user want unsafe requests?\r\n        unsafe\r\n        ? undefined\r\n        : // Didn't specify, use our own certificate\r\n          RIOT_GAMES_CERT\r\n\r\n      return {\r\n        port: Number(port),\r\n        pid: Number(pid),\r\n        password,\r\n        certificate\r\n      }\r\n    } catch {\r\n      throw new ClientNotFoundError()\r\n    }\r\n  }\r\n\r\n  // Does not run windows/linux/darwin\r\n  if (!['win32', 'linux', 'darwin'].includes(process.platform)) {\r\n    throw new InvalidPlatformError()\r\n  }\r\n\r\n  if (options?.awaitConnection) {\r\n    // Poll until a client is found, attempting to resolve every\r\n    // `options.pollInterval` milliseconds\r\n    return new Promise(function self(resolve, reject) {\r\n      tryAuthenticate()\r\n        .then((result) => {\r\n          resolve(result)\r\n        })\r\n        .catch((_) => {\r\n          setTimeout(self, options?.pollInterval ?? DEFAULT_POLL_INTERVAL, resolve, reject)\r\n        })\r\n    })\r\n  } else {\r\n    return tryAuthenticate()\r\n  }\r\n}\r\n","export const RIOT_GAMES_CERT = `\r\n-----BEGIN CERTIFICATE-----\r\nMIIEIDCCAwgCCQDJC+QAdVx4UDANBgkqhkiG9w0BAQUFADCB0TELMAkGA1UEBhMC\r\nVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFTATBgNVBAcTDFNhbnRhIE1vbmljYTET\r\nMBEGA1UEChMKUmlvdCBHYW1lczEdMBsGA1UECxMUTG9MIEdhbWUgRW5naW5lZXJp\r\nbmcxMzAxBgNVBAMTKkxvTCBHYW1lIEVuZ2luZWVyaW5nIENlcnRpZmljYXRlIEF1\r\ndGhvcml0eTEtMCsGCSqGSIb3DQEJARYeZ2FtZXRlY2hub2xvZ2llc0ByaW90Z2Ft\r\nZXMuY29tMB4XDTEzMTIwNDAwNDgzOVoXDTQzMTEyNzAwNDgzOVowgdExCzAJBgNV\r\nBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRUwEwYDVQQHEwxTYW50YSBNb25p\r\nY2ExEzARBgNVBAoTClJpb3QgR2FtZXMxHTAbBgNVBAsTFExvTCBHYW1lIEVuZ2lu\r\nZWVyaW5nMTMwMQYDVQQDEypMb0wgR2FtZSBFbmdpbmVlcmluZyBDZXJ0aWZpY2F0\r\nZSBBdXRob3JpdHkxLTArBgkqhkiG9w0BCQEWHmdhbWV0ZWNobm9sb2dpZXNAcmlv\r\ndGdhbWVzLmNvbTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAKoJemF/\r\n6PNG3GRJGbjzImTdOo1OJRDI7noRwJgDqkaJFkwv0X8aPUGbZSUzUO23cQcCgpYj\r\n21ygzKu5dtCN2EcQVVpNtyPuM2V4eEGr1woodzALtufL3Nlyh6g5jKKuDIfeUBHv\r\nJNyQf2h3Uha16lnrXmz9o9wsX/jf+jUAljBJqsMeACOpXfuZy+YKUCxSPOZaYTLC\r\ny+0GQfiT431pJHBQlrXAUwzOmaJPQ7M6mLfsnpHibSkxUfMfHROaYCZ/sbWKl3lr\r\nZA9DbwaKKfS1Iw0ucAeDudyuqb4JntGU/W0aboKA0c3YB02mxAM4oDnqseuKV/CX\r\n8SQAiaXnYotuNXMCAwEAATANBgkqhkiG9w0BAQUFAAOCAQEAf3KPmddqEqqC8iLs\r\nlcd0euC4F5+USp9YsrZ3WuOzHqVxTtX3hR1scdlDXNvrsebQZUqwGdZGMS16ln3k\r\nWObw7BbhU89tDNCN7Lt/IjT4MGRYRE+TmRc5EeIXxHkQ78bQqbmAI3GsW+7kJsoO\r\nq3DdeE+M+BUJrhWorsAQCgUyZO166SAtKXKLIcxa+ddC49NvMQPJyzm3V+2b1roP\r\nSvD2WV8gRYUnGmy/N0+u6ANq5EsbhZ548zZc+BI4upsWChTLyxt2RxR7+uGlS1+5\r\nEcGfKZ+g024k/J32XP4hdho7WYAS2xMiV83CfLR/MNi8oSMaVQTdKD8cpgiWJk3L\r\nXWehWA==\r\n-----END CERTIFICATE-----\r\n`\r\n","import { EventEmitter } from 'events'\r\nimport { authenticate, ClientNotFoundError, Credentials } from './authentication.js'\r\n\r\nconst DEFAULT_POLL_INTERVAL = 2500\r\n\r\nexport declare interface LeagueClient {\r\n  on(event: 'connect', callback: (credentials: Credentials) => void): this\r\n  on(event: 'disconnect', callback: () => void): this\r\n}\r\n\r\nexport interface LeagueClientOptions {\r\n  /**\r\n   * The time duration in milliseconds between each check for a client\r\n   * disconnect\r\n   *\r\n   * Default: 2500\r\n   */\r\n  pollInterval: number\r\n}\r\n\r\nexport class LeagueClient extends EventEmitter {\r\n  private isListening: boolean = false\r\n  public credentials?: Credentials = undefined\r\n\r\n  constructor(credentials: Credentials, public options?: LeagueClientOptions) {\r\n    super()\r\n    this.credentials = credentials\r\n  }\r\n\r\n  /**\r\n   * Start listening for League Client processes\r\n   */\r\n  start() {\r\n    // Only trigger if it's not already\r\n    // running\r\n    if (!this.isListening) {\r\n      this.isListening = true\r\n\r\n      if (this.credentials === undefined || !processExists(this.credentials.pid)) {\r\n        // Invalidated credentials or no LeagueClientUx process, fail\r\n        throw new ClientNotFoundError()\r\n      }\r\n\r\n      this.onTick()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Stop listening for client stop/start\r\n   */\r\n  stop() {\r\n    this.isListening = false\r\n  }\r\n\r\n  private async onTick() {\r\n    if (this.isListening) {\r\n      if (this.credentials !== undefined) {\r\n        // Current credentials are valid\r\n        if (!processExists(this.credentials.pid)) {\r\n          // No such process, emit disconnect and\r\n          // invalidate credentials\r\n          this.emit('disconnect')\r\n          this.credentials = undefined\r\n          // Re-queue onTick to listen for credentials\r\n          this.onTick()\r\n        } else {\r\n          // Process still lives, queue onTick\r\n          setTimeout(() => {\r\n            this.onTick()\r\n          }, this.options?.pollInterval ?? DEFAULT_POLL_INTERVAL)\r\n        }\r\n      } else {\r\n        // Current credentials were invalidated, wait for\r\n        // client to come back up\r\n        const credentials = await authenticate({\r\n          awaitConnection: true,\r\n          pollInterval: this.options?.pollInterval ?? DEFAULT_POLL_INTERVAL\r\n        })\r\n        this.credentials = credentials\r\n        this.emit('connect', credentials)\r\n        setTimeout(() => {\r\n          this.onTick()\r\n        }, this.options?.pollInterval ?? DEFAULT_POLL_INTERVAL)\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction processExists(pid: number): boolean {\r\n  try {\r\n    // `man 1 kill`: if sig is 0, then no signal is sent, but error checking\r\n    // is still performed.\r\n    return process.kill(pid, 0)\r\n  } catch (err: unknown) {\r\n    return (err as any)?.code === 'EPERM'\r\n  }\r\n}\r\n","import https from 'https'\r\nimport type { IncomingMessage } from 'http'\r\nimport { TextEncoder } from 'util'\r\nimport assert from 'assert'\r\nimport type { Credentials } from './authentication.js'\r\nimport type { HttpResponse, HeaderPair, HttpRequestOptions, JsonObjectLike } from './request_types.js'\r\nimport { trim } from './trim.js'\r\n\r\nexport class Http1Response implements HttpResponse {\r\n  public readonly ok: boolean\r\n  public readonly redirected: boolean\r\n  public readonly status: number\r\n\r\n  public constructor(private _message: IncomingMessage, private _raw: Buffer) {\r\n    assert(_message.complete, 'Response constructor called with incomplete HttpIncomingMessage')\r\n    // Safe assertion, this response originated from a http.ClientRequest\r\n    const code = _message!.statusCode!\r\n\r\n    // See https://fetch.spec.whatwg.org/#statuses\r\n    this.ok = code >= 200 && code < 300\r\n    this.redirected = [301, 302, 303, 307, 308].includes(code)\r\n    this.status = code\r\n  }\r\n\r\n  public json<T = JsonObjectLike>() {\r\n    return JSON.parse(this._raw.toString()) as T\r\n  }\r\n\r\n  public text(): string {\r\n    return this._raw.toString()\r\n  }\r\n\r\n  public buffer(): Buffer {\r\n    return this._raw\r\n  }\r\n\r\n  public headers(): HeaderPair[] {\r\n    const headers: HeaderPair[] = []\r\n\r\n    for (const [key, value] of Object.entries(this._message.headers)) {\r\n      if (key.startsWith(':')) {\r\n        continue\r\n      }\r\n\r\n      if (value === undefined) {\r\n        headers.push([key, ''])\r\n      } else if (Array.isArray(value)) {\r\n        headers.push([key, value.join(', ')])\r\n      } else {\r\n        headers.push([key, value])\r\n      }\r\n    }\r\n\r\n    return headers\r\n  }\r\n}\r\n\r\nexport async function createHttp1Request<T>(\r\n  options: HttpRequestOptions<T>,\r\n  credentials: Credentials\r\n): Promise<Http1Response> {\r\n  const agentOptions: https.AgentOptions =\r\n    credentials.certificate === undefined ? { rejectUnauthorized: false } : { ca: credentials.certificate }\r\n\r\n  return new Promise((resolve, reject) => {\r\n    const request = https.request(\r\n      {\r\n        host: '127.0.0.1',\r\n        port: credentials.port,\r\n        path: '/' + trim(options.url),\r\n        method: options.method,\r\n        headers: {\r\n          Accept: '*/*',\r\n          'Content-Type': 'application/json',\r\n          Authorization: 'Basic ' + Buffer.from(`riot:${credentials.password}`).toString('base64')\r\n        },\r\n        agent: new https.Agent(agentOptions)\r\n      },\r\n      (response) => {\r\n        let buffer: any = []\r\n        response.on('data', (data) => void buffer.push(data))\r\n\r\n        response.on('end', () => {\r\n          try {\r\n            resolve(new Http1Response(response, Buffer.concat(buffer)))\r\n          } catch (jsonError) {\r\n            reject(jsonError)\r\n          }\r\n        })\r\n      }\r\n    )\r\n    if (options.body !== undefined) {\r\n      const data = JSON.stringify(options.body)\r\n      const body = new TextEncoder().encode(data)\r\n      request.write(body, 'utf8')\r\n    }\r\n\r\n    request.on('error', (err) => reject(err))\r\n    request.end()\r\n  })\r\n}\r\n","export function trim(s: string): string {\r\n  let r = s\r\n  while (r.startsWith('/')) {\r\n    r = r.substring(1)\r\n  }\r\n  return r\r\n}\r\n","import http2, { type IncomingHttpHeaders, type IncomingHttpStatusHeader } from 'http2'\r\nimport { TextEncoder } from 'util'\r\nimport assert from 'assert'\r\nimport { trim } from './trim.js'\r\nimport type { Credentials } from './authentication.js'\r\nimport type { HeaderPair, HttpResponse, HttpRequestOptions, JsonObjectLike } from './request_types.js'\r\nimport { RIOT_GAMES_CERT } from './cert.js'\r\n\r\n/**\r\n * Create a HTTP/2.0 client session.\r\n *\r\n * This invocation requires the credentials to have\r\n */\r\nexport async function createHttpSession(credentials: Credentials): Promise<http2.ClientHttp2Session> {\r\n  const certificate = credentials.certificate ?? RIOT_GAMES_CERT\r\n\r\n  return http2.connect(`https://127.0.0.1:${credentials.port}`, {\r\n    ca: certificate\r\n  })\r\n}\r\n\r\nexport class Http2Response implements HttpResponse {\r\n  public readonly ok: boolean\r\n  public readonly redirected: boolean\r\n  public readonly status: number\r\n\r\n  public constructor(\r\n    private _headers: IncomingHttpHeaders & IncomingHttpStatusHeader,\r\n    private _stream: http2.ClientHttp2Stream,\r\n    private _raw: Buffer\r\n  ) {\r\n    assert(_stream.closed, 'Response constructor called with unclosed ClientHttp2Stream')\r\n    const code = _headers[':status']!\r\n\r\n    // See https://fetch.spec.whatwg.org/#statuses\r\n    this.ok = code >= 200 && code < 300\r\n    this.redirected = [301, 302, 303, 307, 308].includes(code)\r\n    this.status = code\r\n  }\r\n\r\n  public json<T = JsonObjectLike>() {\r\n    return JSON.parse(this._raw.toString()) as T\r\n  }\r\n\r\n  public text(): string {\r\n    return this._raw.toString()\r\n  }\r\n\r\n  public buffer(): Buffer {\r\n    return this._raw\r\n  }\r\n\r\n  public headers(): HeaderPair[] {\r\n    const headers: HeaderPair[] = []\r\n\r\n    for (const [key, value] of Object.entries(this._headers)) {\r\n      if (key.startsWith(':')) {\r\n        continue\r\n      }\r\n\r\n      if (value === undefined) {\r\n        headers.push([key, ''])\r\n      } else if (Array.isArray(value)) {\r\n        headers.push([key, value.join(', ')])\r\n      } else {\r\n        headers.push([key, value])\r\n      }\r\n    }\r\n\r\n    return headers\r\n  }\r\n}\r\n\r\nexport async function createHttp2Request<T>(\r\n  options: HttpRequestOptions<T>,\r\n  session: http2.ClientHttp2Session,\r\n  credentials: Credentials\r\n): Promise<Http2Response> {\r\n  assert(!session.closed, 'createHttp2Request called on closed session')\r\n  const request = session.request({\r\n    ':path': '/' + trim(options.url),\r\n    ':method': options.method,\r\n    Accept: '*/*',\r\n    'Content-Type': 'application/json',\r\n    Authorization: 'Basic ' + Buffer.from(`riot:${credentials.password}`).toString('base64')\r\n  })\r\n  if (options.body) {\r\n    const data = JSON.stringify(options.body)\r\n    const body = new TextEncoder().encode(data)\r\n    request.write(body, 'utf8')\r\n  }\r\n\r\n  return new Promise((resolve, reject) => {\r\n    let stream: any = []\r\n    let headers: IncomingHttpHeaders & IncomingHttpStatusHeader\r\n    request.on('response', (response) => {\r\n      headers = response\r\n    })\r\n    request.on('data', (data) => {\r\n      stream.push(data)\r\n    })\r\n    request.on('error', (err) => reject(err))\r\n    request.on('end', () => {\r\n      try {\r\n        request.close()\r\n        resolve(new Http2Response(headers, request, Buffer.concat(stream)))\r\n      } catch (jsonError) {\r\n        reject(jsonError)\r\n      }\r\n    })\r\n  })\r\n}\r\n","import https from 'https'\r\nimport WebSocket, { ClientOptions } from 'ws'\r\nimport { authenticate, AuthenticationOptions } from './authentication.js'\r\nimport { trim } from './trim.js'\r\n\r\nexport interface EventResponse<T = any> {\r\n  /**\r\n   * The uri this event was dispatched at\r\n   */\r\n  uri: string\r\n  /**\r\n   * The data, if any\r\n   */\r\n  data: T\r\n}\r\n\r\n/**\r\n * Callback function for an subscription listener\r\n *\r\n * @param data The data payload (deserialized json)\r\n */\r\nexport type EventCallback<T = any> = (data: T | null, event: EventResponse<T>) => void\r\n\r\n/**\r\n * WebSocket extension\r\n */\r\nexport class LeagueWebSocket extends WebSocket {\r\n  subscriptions: Map<string, EventCallback[]> = new Map()\r\n\r\n  constructor(address: string, options: ClientOptions) {\r\n    super(address, options)\r\n\r\n    // Subscribe to Json API\r\n    this.on('open', () => {\r\n      this.send(JSON.stringify([5, 'OnJsonApiEvent']))\r\n    })\r\n\r\n    // Attach the LeagueWebSocket subscription hook\r\n    this.on('message', (content: string) => {\r\n      // Attempt to parse into JSON and dispatch events\r\n      try {\r\n        const json = JSON.parse(content)\r\n        const [res]: [EventResponse] = json.slice(2)\r\n\r\n        if (this.subscriptions.has(res.uri)) {\r\n          this.subscriptions.get(res.uri)?.forEach((cb) => {\r\n            cb(res.data, res)\r\n          })\r\n        }\r\n      } catch {}\r\n    })\r\n  }\r\n\r\n  public subscribe<T extends any = any>(path: string, effect: EventCallback<T>) {\r\n    const p = `/${trim(path)}`\r\n\r\n    if (!this.subscriptions.has(p)) {\r\n      this.subscriptions.set(p, [effect])\r\n    } else {\r\n      this.subscriptions.get(p)?.push(effect)\r\n    }\r\n  }\r\n\r\n  public unsubscribe(path: string) {\r\n    const p = `/${trim(path)}`\r\n\r\n    this.subscriptions.delete(p)\r\n  }\r\n}\r\n\r\nexport interface ConnectionOptions {\r\n  /**\r\n   * Options that will be used to authenticate to the LCU WebSocket API\r\n   */\r\n  authenticationOptions: AuthenticationOptions\r\n\r\n  /**\r\n   * Polling interval in case connection fails.\r\n   *\r\n   * Default: 1000\r\n   */\r\n  pollInterval: number\r\n\r\n  /** Internal, do not use, only used for testing. */\r\n  __internalMockFaultyConnection?: number\r\n  __internalMockCallback?: () => void\r\n}\r\n\r\nexport async function createWebSocketConnection(options: ConnectionOptions): Promise<LeagueWebSocket> {\r\n  const credentials = await authenticate(options.authenticationOptions)\r\n  const url = `wss://riot:${credentials.password}@127.0.0.1:${credentials.port}`\r\n\r\n  let __mockFaultyCounter = options.__internalMockFaultyConnection ?? 0\r\n\r\n  let socket: LeagueWebSocket | null = null\r\n  do {\r\n    try {\r\n      if (__mockFaultyCounter > 0) {\r\n        __mockFaultyCounter--\r\n        options?.__internalMockCallback?.()\r\n        throw new Error('__mockFaultyCounter socket connection')\r\n      }\r\n\r\n      socket = new LeagueWebSocket(url, {\r\n        headers: {\r\n          Authorization: 'Basic ' + Buffer.from(`riot:${credentials.password}`).toString('base64')\r\n        },\r\n        agent: new https.Agent(\r\n          typeof credentials?.certificate === 'undefined'\r\n            ? {\r\n                rejectUnauthorized: false\r\n              }\r\n            : {\r\n                ca: credentials?.certificate\r\n              }\r\n        )\r\n      })\r\n    } catch (err) {\r\n      await setTimeout(() => void 0, options.pollInterval ?? 1000)\r\n    }\r\n  } while (socket?.readyState !== LeagueWebSocket.OPEN && socket?.readyState !== LeagueWebSocket.CONNECTING)\r\n\r\n  return socket\r\n}\r\n","import fetch, { Response as FetchResponse } from 'node-fetch'\r\nimport https from 'https'\r\nimport type { Credentials } from './authentication.js'\r\nimport { trim } from './trim.js'\r\n\r\nexport interface DEPRECATED_RequestOptions<T = any> {\r\n  /**\r\n   * Relative URL (relative to LCU API base url) to send api request to\r\n   */\r\n  url: string\r\n  /**\r\n   * Http verb to use for request\r\n   */\r\n  method: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE'\r\n  /**\r\n   * Optionally a body to pass to PUT/PATCH/POST/DELETE. This is typically\r\n   * an object type as the library will parse this into JSON and send along\r\n   * with the request\r\n   */\r\n  body?: T\r\n}\r\n\r\n/**\r\n * Wrapper around Node-fetch Response which will deserialize JSON into the\r\n * proper type\r\n */\r\nexport class DEPRECATED_Response<T> extends FetchResponse {\r\n  constructor(parent: FetchResponse) {\r\n    super(parent.body, parent)\r\n  }\r\n\r\n  /**\r\n   * Deserialize the response body into T\r\n   */\r\n  async json(): Promise<T> {\r\n    const object = await super.json()\r\n\r\n    return object as T\r\n  }\r\n}\r\n\r\nexport async function DEPRECATED_request<T = any, R = any>(\r\n  options: DEPRECATED_RequestOptions<T>,\r\n  credentials?: Credentials\r\n): Promise<DEPRECATED_Response<R>> {\r\n  const uri = trim(options.url)\r\n  const url = `https://127.0.0.1:${credentials?.port}/${uri}`\r\n  const hasBody = options.method !== 'GET' && options.body !== undefined\r\n\r\n  const response = await fetch(url, {\r\n    method: options.method,\r\n    body: hasBody ? JSON.stringify(options.body) : undefined,\r\n    headers: {\r\n      Accept: 'application/json',\r\n      'Content-Type': 'application/json',\r\n      Authorization: 'Basic ' + Buffer.from(`riot:${credentials?.password}`).toString('base64')\r\n    },\r\n    agent: new https.Agent(\r\n      typeof credentials?.certificate === 'undefined'\r\n        ? {\r\n            rejectUnauthorized: false\r\n          }\r\n        : {\r\n            ca: credentials?.certificate\r\n          }\r\n    )\r\n  })\r\n\r\n  return new DEPRECATED_Response<R>(response)\r\n}\r\n","import https from 'https'\r\nimport { LeagueWebSocket } from './websocket.js'\r\nimport { Credentials } from './authentication.js'\r\n\r\nexport async function DEPRECATED_connect(credentials: Credentials): Promise<LeagueWebSocket> {\r\n  const url = `wss://riot:${credentials.password}@127.0.0.1:${credentials.port}`\r\n\r\n  return new LeagueWebSocket(url, {\r\n    headers: {\r\n      Authorization: 'Basic ' + Buffer.from(`riot:${credentials.password}`).toString('base64')\r\n    },\r\n    agent: new https.Agent(\r\n      typeof credentials?.certificate === 'undefined'\r\n        ? {\r\n            rejectUnauthorized: false\r\n          }\r\n        : {\r\n            ca: credentials?.certificate\r\n          }\r\n    )\r\n  })\r\n}\r\n"],"mappings":";AAAA;AACA;;;ACDO,IAAM,kBAAkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ADI/B,IAAM,OAAO,KAAK,UAAwC,GAAG,IAAI;AAEjE,IAAM,eAAe;AACrB,IAAM,wBAAwB;AA+EvB,IAAM,uBAAN,cAAmC,MAAM;AAAA,EAC9C,cAAc;AACZ,UAAM,kDAAkD;AAAA,EAC1D;AACF;AAKO,IAAM,sBAAN,cAAkC,MAAM;AAAA,EAC7C,cAAc;AACZ,UAAM,4CAA4C;AAAA,EACpD;AACF;AAcA,4BAAmC,SAAuD;AACxF,mCAAiC;AAC/B,UAAM,OAAO,oCAAS,SAAQ;AAC9B,UAAM,YAAY;AAClB,UAAM,gBAAgB;AACtB,UAAM,WAAW;AACjB,UAAM,YAAY,QAAQ,aAAa;AAEvC,QAAI;AACJ,QAAI,CAAC,WAAW;AACd,gBAAU,wBAAwB;AAAA,IACpC,WAAW,aAAa,oCAAS,uBAAsB,MAAM;AAC3D,gBAAU,+BAA+B;AAAA,IAC3C,OAAO;AACL,gBAAU,wEAAwE;AAAA,IACpF;AAEA,UAAM,mBAAmB,YAAY,EAAE,OAAO,oCAAS,iBAAiB,aAAwB,IAAI,CAAC;AAErG,QAAI;AAEF,YAAM,EAAE,QAAQ,cAAc,MAAM,KAAK,SAAS,gBAAgB;AAElE,YAAM,SAAU,UAAkB,QAAQ,OAAO,EAAE;AACnD,YAAM,CAAC,EAAE,QAAQ,OAAO,MAAM,SAAS;AACvC,YAAM,CAAC,EAAE,YAAY,OAAO,MAAM,aAAa;AAC/C,YAAM,CAAC,EAAE,OAAO,OAAO,MAAM,QAAQ;AACrC,YAAM,SAAS,oCAAS,YAAW;AACnC,YAAM,UAAU,oCAAS,iBAAgB;AAIzC,YAAM,cAAc,UAChB,QAAS,cAEX,SACE,SAEA;AAEJ,aAAO;AAAA,QACL,MAAM,OAAO,IAAI;AAAA,QACjB,KAAK,OAAO,GAAG;AAAA,QACf;AAAA,QACA;AAAA,MACF;AAAA,IACF,QAAE;AACA,YAAM,IAAI,oBAAoB;AAAA,IAChC;AAAA,EACF;AAGA,MAAI,CAAC,CAAC,SAAS,SAAS,QAAQ,EAAE,SAAS,QAAQ,QAAQ,GAAG;AAC5D,UAAM,IAAI,qBAAqB;AAAA,EACjC;AAEA,MAAI,mCAAS,iBAAiB;AAG5B,WAAO,IAAI,QAAQ,cAAc,SAAS,QAAQ;AAChD,sBAAgB,EACb,KAAK,CAAC,WAAW;AAChB,gBAAQ,MAAM;AAAA,MAChB,CAAC,EACA,MAAM,CAAC,MAAM;AACZ,mBAAW,MAAM,oCAAS,iBAAgB,uBAAuB,SAAS,MAAM;AAAA,MAClF,CAAC;AAAA,IACL,CAAC;AAAA,EACH,OAAO;AACL,WAAO,gBAAgB;AAAA,EACzB;AACF;;;AExLA;AAGA,IAAM,yBAAwB;AAiBvB,IAAM,eAAN,cAA2B,aAAa;AAAA,EAI7C,YAAY,aAAiC,SAA+B;AAC1E,UAAM;AADqC;AAE3C,SAAK,cAAc;AAAA,EACrB;AAAA,EANA,AAAQ,cAAuB;AAAA,EAC/B,AAAO,cAA4B;AAAA,EAUnC,QAAQ;AAGN,QAAI,CAAC,KAAK,aAAa;AACrB,WAAK,cAAc;AAEnB,UAAI,KAAK,gBAAgB,UAAa,CAAC,cAAc,KAAK,YAAY,GAAG,GAAG;AAE1E,cAAM,IAAI,oBAAoB;AAAA,MAChC;AAEA,WAAK,OAAO;AAAA,IACd;AAAA,EACF;AAAA,EAKA,OAAO;AACL,SAAK,cAAc;AAAA,EACrB;AAAA,EAEA,MAAc,SAAS;AAtDzB;AAuDI,QAAI,KAAK,aAAa;AACpB,UAAI,KAAK,gBAAgB,QAAW;AAElC,YAAI,CAAC,cAAc,KAAK,YAAY,GAAG,GAAG;AAGxC,eAAK,KAAK,YAAY;AACtB,eAAK,cAAc;AAEnB,eAAK,OAAO;AAAA,QACd,OAAO;AAEL,qBAAW,MAAM;AACf,iBAAK,OAAO;AAAA,UACd,GAAG,YAAK,YAAL,mBAAc,iBAAgB,sBAAqB;AAAA,QACxD;AAAA,MACF,OAAO;AAGL,cAAM,cAAc,MAAM,aAAa;AAAA,UACrC,iBAAiB;AAAA,UACjB,cAAc,YAAK,YAAL,mBAAc,iBAAgB;AAAA,QAC9C,CAAC;AACD,aAAK,cAAc;AACnB,aAAK,KAAK,WAAW,WAAW;AAChC,mBAAW,MAAM;AACf,eAAK,OAAO;AAAA,QACd,GAAG,YAAK,YAAL,mBAAc,iBAAgB,sBAAqB;AAAA,MACxD;AAAA,IACF;AAAA,EACF;AACF;AAEA,uBAAuB,KAAsB;AAC3C,MAAI;AAGF,WAAO,QAAQ,KAAK,KAAK,CAAC;AAAA,EAC5B,SAAS,KAAP;AACA,WAAQ,4BAAa,UAAS;AAAA,EAChC;AACF;;;AChGA;AAEA;AACA;;;ACHO,cAAc,GAAmB;AACtC,MAAI,IAAI;AACR,SAAO,EAAE,WAAW,GAAG,GAAG;AACxB,QAAI,EAAE,UAAU,CAAC;AAAA,EACnB;AACA,SAAO;AACT;;;ADEO,IAAM,gBAAN,MAA4C;AAAA,EAKjD,AAAO,YAAoB,UAAmC,MAAc;AAAjD;AAAmC;AAC5D,WAAO,SAAS,UAAU,iEAAiE;AAE3F,UAAM,OAAO,SAAU;AAGvB,SAAK,KAAK,QAAQ,OAAO,OAAO;AAChC,SAAK,aAAa,CAAC,KAAK,KAAK,KAAK,KAAK,GAAG,EAAE,SAAS,IAAI;AACzD,SAAK,SAAS;AAAA,EAChB;AAAA,EAbA,AAAgB;AAAA,EAChB,AAAgB;AAAA,EAChB,AAAgB;AAAA,EAahB,AAAO,OAA2B;AAChC,WAAO,KAAK,MAAM,KAAK,KAAK,SAAS,CAAC;AAAA,EACxC;AAAA,EAEA,AAAO,OAAe;AACpB,WAAO,KAAK,KAAK,SAAS;AAAA,EAC5B;AAAA,EAEA,AAAO,SAAiB;AACtB,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,AAAO,UAAwB;AAC7B,UAAM,UAAwB,CAAC;AAE/B,eAAW,CAAC,KAAK,UAAU,OAAO,QAAQ,KAAK,SAAS,OAAO,GAAG;AAChE,UAAI,IAAI,WAAW,GAAG,GAAG;AACvB;AAAA,MACF;AAEA,UAAI,UAAU,QAAW;AACvB,gBAAQ,KAAK,CAAC,KAAK,EAAE,CAAC;AAAA,MACxB,WAAW,MAAM,QAAQ,KAAK,GAAG;AAC/B,gBAAQ,KAAK,CAAC,KAAK,MAAM,KAAK,IAAI,CAAC,CAAC;AAAA,MACtC,OAAO;AACL,gBAAQ,KAAK,CAAC,KAAK,KAAK,CAAC;AAAA,MAC3B;AAAA,IACF;AAEA,WAAO;AAAA,EACT;AACF;AAEA,kCACE,SACA,aACwB;AACxB,QAAM,eACJ,YAAY,gBAAgB,SAAY,EAAE,oBAAoB,MAAM,IAAI,EAAE,IAAI,YAAY,YAAY;AAExG,SAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtC,UAAM,UAAU,MAAM,QACpB;AAAA,MACE,MAAM;AAAA,MACN,MAAM,YAAY;AAAA,MAClB,MAAM,MAAM,KAAK,QAAQ,GAAG;AAAA,MAC5B,QAAQ,QAAQ;AAAA,MAChB,SAAS;AAAA,QACP,QAAQ;AAAA,QACR,gBAAgB;AAAA,QAChB,eAAe,WAAW,OAAO,KAAK,QAAQ,YAAY,UAAU,EAAE,SAAS,QAAQ;AAAA,MACzF;AAAA,MACA,OAAO,IAAI,MAAM,MAAM,YAAY;AAAA,IACrC,GACA,CAAC,aAAa;AACZ,UAAI,SAAc,CAAC;AACnB,eAAS,GAAG,QAAQ,CAAC,SAAS,KAAK,OAAO,KAAK,IAAI,CAAC;AAEpD,eAAS,GAAG,OAAO,MAAM;AACvB,YAAI;AACF,kBAAQ,IAAI,cAAc,UAAU,OAAO,OAAO,MAAM,CAAC,CAAC;AAAA,QAC5D,SAAS,WAAP;AACA,iBAAO,SAAS;AAAA,QAClB;AAAA,MACF,CAAC;AAAA,IACH,CACF;AACA,QAAI,QAAQ,SAAS,QAAW;AAC9B,YAAM,OAAO,KAAK,UAAU,QAAQ,IAAI;AACxC,YAAM,OAAO,IAAI,YAAY,EAAE,OAAO,IAAI;AAC1C,cAAQ,MAAM,MAAM,MAAM;AAAA,IAC5B;AAEA,YAAQ,GAAG,SAAS,CAAC,QAAQ,OAAO,GAAG,CAAC;AACxC,YAAQ,IAAI;AAAA,EACd,CAAC;AACH;;;AEpGA;AACA;AACA;AAWA,iCAAwC,aAA6D;AACnG,QAAM,cAAc,YAAY,eAAe;AAE/C,SAAO,MAAM,QAAQ,qBAAqB,YAAY,QAAQ;AAAA,IAC5D,IAAI;AAAA,EACN,CAAC;AACH;AAEO,IAAM,gBAAN,MAA4C;AAAA,EAKjD,AAAO,YACG,UACA,SACA,MACR;AAHQ;AACA;AACA;AAER,YAAO,QAAQ,QAAQ,6DAA6D;AACpF,UAAM,OAAO,SAAS;AAGtB,SAAK,KAAK,QAAQ,OAAO,OAAO;AAChC,SAAK,aAAa,CAAC,KAAK,KAAK,KAAK,KAAK,GAAG,EAAE,SAAS,IAAI;AACzD,SAAK,SAAS;AAAA,EAChB;AAAA,EAhBA,AAAgB;AAAA,EAChB,AAAgB;AAAA,EAChB,AAAgB;AAAA,EAgBhB,AAAO,OAA2B;AAChC,WAAO,KAAK,MAAM,KAAK,KAAK,SAAS,CAAC;AAAA,EACxC;AAAA,EAEA,AAAO,OAAe;AACpB,WAAO,KAAK,KAAK,SAAS;AAAA,EAC5B;AAAA,EAEA,AAAO,SAAiB;AACtB,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,AAAO,UAAwB;AAC7B,UAAM,UAAwB,CAAC;AAE/B,eAAW,CAAC,KAAK,UAAU,OAAO,QAAQ,KAAK,QAAQ,GAAG;AACxD,UAAI,IAAI,WAAW,GAAG,GAAG;AACvB;AAAA,MACF;AAEA,UAAI,UAAU,QAAW;AACvB,gBAAQ,KAAK,CAAC,KAAK,EAAE,CAAC;AAAA,MACxB,WAAW,MAAM,QAAQ,KAAK,GAAG;AAC/B,gBAAQ,KAAK,CAAC,KAAK,MAAM,KAAK,IAAI,CAAC,CAAC;AAAA,MACtC,OAAO;AACL,gBAAQ,KAAK,CAAC,KAAK,KAAK,CAAC;AAAA,MAC3B;AAAA,IACF;AAEA,WAAO;AAAA,EACT;AACF;AAEA,kCACE,SACA,SACA,aACwB;AACxB,UAAO,CAAC,QAAQ,QAAQ,6CAA6C;AACrE,QAAM,UAAU,QAAQ,QAAQ;AAAA,IAC9B,SAAS,MAAM,KAAK,QAAQ,GAAG;AAAA,IAC/B,WAAW,QAAQ;AAAA,IACnB,QAAQ;AAAA,IACR,gBAAgB;AAAA,IAChB,eAAe,WAAW,OAAO,KAAK,QAAQ,YAAY,UAAU,EAAE,SAAS,QAAQ;AAAA,EACzF,CAAC;AACD,MAAI,QAAQ,MAAM;AAChB,UAAM,OAAO,KAAK,UAAU,QAAQ,IAAI;AACxC,UAAM,OAAO,IAAI,aAAY,EAAE,OAAO,IAAI;AAC1C,YAAQ,MAAM,MAAM,MAAM;AAAA,EAC5B;AAEA,SAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtC,QAAI,SAAc,CAAC;AACnB,QAAI;AACJ,YAAQ,GAAG,YAAY,CAAC,aAAa;AACnC,gBAAU;AAAA,IACZ,CAAC;AACD,YAAQ,GAAG,QAAQ,CAAC,SAAS;AAC3B,aAAO,KAAK,IAAI;AAAA,IAClB,CAAC;AACD,YAAQ,GAAG,SAAS,CAAC,QAAQ,OAAO,GAAG,CAAC;AACxC,YAAQ,GAAG,OAAO,MAAM;AACtB,UAAI;AACF,gBAAQ,MAAM;AACd,gBAAQ,IAAI,cAAc,SAAS,SAAS,OAAO,OAAO,MAAM,CAAC,CAAC;AAAA,MACpE,SAAS,WAAP;AACA,eAAO,SAAS;AAAA,MAClB;AAAA,IACF,CAAC;AAAA,EACH,CAAC;AACH;;;AC/GA;AACA;AAyBO,IAAM,kBAAN,cAA8B,UAAU;AAAA,EAC7C,gBAA8C,oBAAI,IAAI;AAAA,EAEtD,YAAY,SAAiB,SAAwB;AACnD,UAAM,SAAS,OAAO;AAGtB,SAAK,GAAG,QAAQ,MAAM;AACpB,WAAK,KAAK,KAAK,UAAU,CAAC,GAAG,gBAAgB,CAAC,CAAC;AAAA,IACjD,CAAC;AAGD,SAAK,GAAG,WAAW,CAAC,YAAoB;AAtC5C;AAwCM,UAAI;AACF,cAAM,OAAO,KAAK,MAAM,OAAO;AAC/B,cAAM,CAAC,OAAwB,KAAK,MAAM,CAAC;AAE3C,YAAI,KAAK,cAAc,IAAI,IAAI,GAAG,GAAG;AACnC,qBAAK,cAAc,IAAI,IAAI,GAAG,MAA9B,mBAAiC,QAAQ,CAAC,OAAO;AAC/C,eAAG,IAAI,MAAM,GAAG;AAAA,UAClB;AAAA,QACF;AAAA,MACF,QAAE;AAAA,MAAO;AAAA,IACX,CAAC;AAAA,EACH;AAAA,EAEA,AAAO,UAA+B,MAAc,QAA0B;AArDhF;AAsDI,UAAM,IAAI,IAAI,KAAK,IAAI;AAEvB,QAAI,CAAC,KAAK,cAAc,IAAI,CAAC,GAAG;AAC9B,WAAK,cAAc,IAAI,GAAG,CAAC,MAAM,CAAC;AAAA,IACpC,OAAO;AACL,iBAAK,cAAc,IAAI,CAAC,MAAxB,mBAA2B,KAAK;AAAA,IAClC;AAAA,EACF;AAAA,EAEA,AAAO,YAAY,MAAc;AAC/B,UAAM,IAAI,IAAI,KAAK,IAAI;AAEvB,SAAK,cAAc,OAAO,CAAC;AAAA,EAC7B;AACF;AAoBA,yCAAgD,SAAsD;AAxFtG;AAyFE,QAAM,cAAc,MAAM,aAAa,QAAQ,qBAAqB;AACpE,QAAM,MAAM,cAAc,YAAY,sBAAsB,YAAY;AAExE,MAAI,sBAAsB,QAAQ,kCAAkC;AAEpE,MAAI,SAAiC;AACrC,KAAG;AACD,QAAI;AACF,UAAI,sBAAsB,GAAG;AAC3B;AACA,iDAAS,2BAAT;AACA,cAAM,IAAI,MAAM,uCAAuC;AAAA,MACzD;AAEA,eAAS,IAAI,gBAAgB,KAAK;AAAA,QAChC,SAAS;AAAA,UACP,eAAe,WAAW,OAAO,KAAK,QAAQ,YAAY,UAAU,EAAE,SAAS,QAAQ;AAAA,QACzF;AAAA,QACA,OAAO,IAAI,OAAM,MACf,OAAO,4CAAa,iBAAgB,cAChC;AAAA,UACE,oBAAoB;AAAA,QACtB,IACA;AAAA,UACE,IAAI,2CAAa;AAAA,QACnB,CACN;AAAA,MACF,CAAC;AAAA,IACH,SAAS,KAAP;AACA,YAAM,WAAW,MAAM,QAAQ,QAAQ,gBAAgB,GAAI;AAAA,IAC7D;AAAA,EACF,SAAS,kCAAQ,gBAAe,gBAAgB,QAAQ,kCAAQ,gBAAe,gBAAgB;AAE/F,SAAO;AACT;;;AC3HA;AACA;AAyBO,IAAM,sBAAN,cAAqC,cAAc;AAAA,EACxD,YAAY,QAAuB;AACjC,UAAM,OAAO,MAAM,MAAM;AAAA,EAC3B;AAAA,EAKA,MAAM,OAAmB;AACvB,UAAM,SAAS,MAAM,MAAM,KAAK;AAEhC,WAAO;AAAA,EACT;AACF;AAEA,kCACE,SACA,aACiC;AACjC,QAAM,MAAM,KAAK,QAAQ,GAAG;AAC5B,QAAM,MAAM,qBAAqB,2CAAa,QAAQ;AACtD,QAAM,UAAU,QAAQ,WAAW,SAAS,QAAQ,SAAS;AAE7D,QAAM,WAAW,MAAM,MAAM,KAAK;AAAA,IAChC,QAAQ,QAAQ;AAAA,IAChB,MAAM,UAAU,KAAK,UAAU,QAAQ,IAAI,IAAI;AAAA,IAC/C,SAAS;AAAA,MACP,QAAQ;AAAA,MACR,gBAAgB;AAAA,MAChB,eAAe,WAAW,OAAO,KAAK,QAAQ,2CAAa,UAAU,EAAE,SAAS,QAAQ;AAAA,IAC1F;AAAA,IACA,OAAO,IAAI,OAAM,MACf,OAAO,4CAAa,iBAAgB,cAChC;AAAA,MACE,oBAAoB;AAAA,IACtB,IACA;AAAA,MACE,IAAI,2CAAa;AAAA,IACnB,CACN;AAAA,EACF,CAAC;AAED,SAAO,IAAI,oBAAuB,QAAQ;AAC5C;;;ACrEA;AAIA,kCAAyC,aAAoD;AAC3F,QAAM,MAAM,cAAc,YAAY,sBAAsB,YAAY;AAExE,SAAO,IAAI,gBAAgB,KAAK;AAAA,IAC9B,SAAS;AAAA,MACP,eAAe,WAAW,OAAO,KAAK,QAAQ,YAAY,UAAU,EAAE,SAAS,QAAQ;AAAA,IACzF;AAAA,IACA,OAAO,IAAI,OAAM,MACf,OAAO,4CAAa,iBAAgB,cAChC;AAAA,MACE,oBAAoB;AAAA,IACtB,IACA;AAAA,MACE,IAAI,2CAAa;AAAA,IACnB,CACN;AAAA,EACF,CAAC;AACH;","names":[]}